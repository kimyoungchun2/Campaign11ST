<?xml version="1.0" encoding="UTF-8" ?> 
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Schedule">
  
    <resultMap type="com.skplanet.sascm.object.CampaignRunResvBO" id="CampaignRunResvBO">
      <result property="campaigncode"          column="campaigncode"        />
      <result property="campaignid"            column="campaignid"          />
      <result property="campaignname"          column="campaignname"        />
      <result property="flowchartid"           column="flowchartid"         />
      <result property="flowchartname"         column="flowchartname"       />
      <result property="rsrv_start_dt"         column="rsrv_start_dt"       />
      <result property="rsrv_end_dt"           column="rsrv_end_dt"         />
      <result property="rsrv_gubun_code"       column="rsrv_gubun_code"     />
      <result property="rsrv_year"             column="rsrv_year"           />
      <result property="rsrv_month"            column="rsrv_month"          />
      <result property="rsrv_day"              column="rsrv_day"            />
      <result property="rsrv_hour"             column="rsrv_hour"           />
      <result property="rsrv_minute"           column="rsrv_minute"         />
      <result property="rsrv_week_day"         column="rsrv_week_day"       />
      <result property="rsrv_timehourfrom"     column="rsrv_timehourfrom"   />
      <result property="rsrv_timehourto"       column="rsrv_timehourto"     />
      <result property="rsrv_timemin"          column="rsrv_timemin"        />
      <result property="create_id"             column="create_id"           />
      <result property="create_nm"             column="create_nm"           />
      <result property="create_dt"             column="create_dt"           />
      <result property="update_id"             column="update_id"           />
      <result property="update_nm"             column="update_nm"           />
      <result property="update_dt"             column="update_dt"           />
      <result property="audience_cd"           column="audience_cd"         />
      <result property="manual_trans_yn"       column="manual_trans_yn"     />
      <result property="offer_direct_yn"       column="offer_direct_yn"     />
      <result property="channel_priority_yn"   column="channel_priority_yn" />
      <result property="camp_status_cd"        column="camp_status_cd"      />
      <result property="camp_bgn_dt"           column="camp_bgn_dt"         />
      <result property="camp_end_dt"           column="camp_end_dt"         />
      <result property="camp_term_cd"          column="camp_term_cd"        />
      <result property="cellCnt"               column="cellCnt"             />
      <result property="channelCnt"            column="channelCnt"          />
      <result property="minDispDt"             column="minDispDt"           />
      <result property="scheduleCnt"           column="scheduleCnt"         />
      <result property="schedulePlayCnt"       column="schedulePlayCnt"     />
      <result property="rsrv_gubun_code_name"  column="rsrv_gubun_code_name"/>
      <result property="rsrv_everytime"        column="rsrv_everytime"      />
      
      <result property="multistep_cistudio_yn"        column="multistep_cistudio_yn"      />
      
    </resultMap>
 
 
    <resultMap type="com.skplanet.sascm.object.CampaignRunScheduleBO" id="CampaignRunScheduleBO">
      <result property="num"             column="num"                />
      <result property="campaigncode"    column="campaigncode"       />
      <result property="flowchartid"     column="flowchartid"        />
      <result property="rsrv_dt"         column="rsrv_dt"            />
      <result property="run_start_dt"    column="run_start_dt"       />
      <result property="run_end_dt"      column="run_end_dt"         />
      <result property="runid"           column="runid"              />
      <result property="run_status"      column="run_status"         />
      <result property="run_success_yn"  column="run_success_yn"     />
      <result property="create_id"       column="create_id"          />
      <result property="create_nm"       column="create_nm"          />
      <result property="create_dt"       column="create_dt"          />
      <result property="update_id"       column="update_id"          />
      <result property="update_nm"       column="update_nm"          />
      <result property="update_dt"       column="update_dt"          />
    </resultMap> 
  <!-- 플로차트 실행일정 조회 -->
  <select id="Schedule.getScheduleDetail" parameterType="Map"  resultMap="CampaignRunResvBO">
    SELECT A.*
        ,TO_CHAR(TO_DATE(B.RSRV_START_DT, 'YYYYMMDD'), 'YYYY-MM-DD')    rsrv_start_dt
        ,TO_CHAR(TO_DATE(B.RSRV_END_DT  , 'YYYYMMDD'), 'YYYY-MM-DD')    rsrv_end_dt
        ,B.RSRV_GUBUN_CODE   rsrv_gubun_code
        ,(SELECT CODE_NAME FROM cm_code_dtl WHERE COMM_CODE_ID = 'C014' AND USE_YN = 'Y' AND CODE_ID = b.RSRV_GUBUN_CODE ) rsrv_gubun_code_name
        ,B.RSRV_YEAR         rsrv_year
        ,B.RSRV_MONTH        rsrv_month
        ,B.RSRV_DAY          rsrv_day
        ,B.RSRV_HOUR         rsrv_hour
        ,B.RSRV_MINUTE       rsrv_minute
        ,B.RSRV_WEEK_DAY     rsrv_week_day
        ,B.RSRV_TIMEHOURFROM rsrv_timehourfrom
        ,B.RSRV_TIMEHOURTO   rsrv_timehourto
        ,B.RSRV_TIMEMIN      rsrv_timemin
        ,B.RSRV_EVERYTIME    rsrv_everytime
        ,B.CREATE_ID         create_id
        ,(SELECT USERID FROM CM_USER WHERE ID = B.CREATE_ID) create_nm
        ,TO_CHAR(B.CREATE_DT, 'YYYY-MM-DD HH24:MI:SS')         create_dt
        ,B.UPDATE_ID         update_id
        ,(SELECT USERID FROM CM_USER WHERE ID = B.UPDATE_ID) update_nm
        ,TO_CHAR(B.UPDATE_DT, 'YYYY-MM-DD HH24:MI:SS')         update_dt
        ,(SELECT COUNT(0) FROM cm_campaign_run_schedule WHERE CAMPAIGNCODE = A.CAMPAIGNCODE) scheduleCnt
        ,(SELECT COUNT(0) FROM cm_campaign_run_schedule WHERE CAMPAIGNCODE = A.CAMPAIGNCODE AND RUN_START_DT IS NOT NULL) schedulePlayCnt
        ,(SELECT DISTINCT MULTISTEP_CISTUDIO_YN FROM CM_CAMPAIGN_RUN_SCHEDULE WHERE CAMPAIGNCODE = A.CAMPAIGNCODE) multistep_cistudio_yn
        /*,A.CAMP_STATUS_CD camp_status_cd*/
    FROM(
        SELECT
             A.CAMPAIGN_NM                  campaignname
            ,A.CAMPAIGN_CD          campaigncode
            ,A.CAMPAIGN_SK            campaignid
            ,D.CAMP_TERM_CD          camp_term_cd
            ,D.AUDIENCE_CD           audience_cd
            ,D.MANUAL_TRANS_YN       manual_trans_yn
            ,D.OFFER_DIRECT_YN       offer_direct_yn
            ,D.CHANNEL_PRIORITY_YN   channel_priority_yn
            ,D.CAMP_STATUS_CD        camp_status_cd
            ,TO_CHAR(D.CAMP_BGN_DT, 'YYYY-MM-DD') camp_bgn_dt
                ,TO_CHAR(D.CAMP_END_DT, 'YYYY-MM-DD') camp_end_dt
        FROM CI_CAMPAIGN             A
            ,cm_campaign_dtl      D
       WHERE 1=1 
      AND A.CAMPAIGN_SK = #{CAMPAIGNID}
         AND A.CAMPAIGN_SK = D.CAMPAIGNID
    )A
    ,cm_campaign_run_resv B
    WHERE A.CAMPAIGNCODE = B.CAMPAIGNCODE(+)
  </select>
  
  <select id="Schedule.getRunScheduleCnt" parameterType="Map" resultType="java.lang.Integer">
    SELECT 
      COUNT(*) 
    FROM 
      CM_CAMPAIGN_RUN_SCHEDULE
    WHERE 
      CAMPAIGNCODE = #{CAMPAIGNCODE}
      AND RUN_SUCCESS_YN IS NULL
      AND RUN_START_DT IS NOT NULL
      AND RUN_END_DT IS NULL
      AND RSRV_DT IS NOT NULL
      AND RUN_STATUS IS NOT NULL
      AND RUNID IS NOT NULL
  </select>

  <!-- 일정 저장전 유효성 체크1 (대상수준이 PCID일때 오퍼가 있거나, 채널이 토스트 배너가 아닐경우 진행불가) -->
  <select id="Schedule.getCampaignValiChk01" parameterType="Map" resultType="String">
    SELECT CASE WHEN COUNT(0) = 0 THEN 'Y' ELSE 'N' END
      FROM (
        SELECT 
            CASE WHEN M.AUDIENCE_CD = 'PCID' AND (NVL(C.OFFER_TYPE_CD,'ZZ') != 'ZZ' OR NVL(D.CHANNEL_CD,'TOAST') != 'TOAST') THEN 'N' ELSE 'Y' END VALI
          FROM cm_campaign_dtl M
            ,CI_CELL_PACKAGE A
            ,cm_campaign_offer C
            ,cm_campaign_channel D
         WHERE A.CAMPAIGN_CD = #{CAMPAIGNCODE}
           AND M.CAMPAIGNCODE = C.CAMPAIGNCODE
           AND A.CAMPAIGN_CD = C.CAMPAIGNCODE
           AND A.MARKETING_CELL_SK = C.CELLID(+)
           AND C.CELLID = D.CELLID(+)
     )
     WHERE VALI = 'N'
  </select>
  
  



  <!-- 일정 저장전 유효성 체크2 (오퍼 템플릿 쿠폰복사여부가 'Y'일 경우에는 쿠폰 발급기간이 캠페인 기간이 동일해야한다) -->
  <select id="Schedule.getCampaignValiChk02" parameterType="Map" resultType="String">
    SELECT CASE WHEN CAMP_TERM_CD = '02' THEN  'Y'
                WHEN CAMP_TERM_CD = '01' AND TO_CHAR(CAMP_BGN_DT, 'YYYY-MM-DD') = #{ISS_CN_BGN_DT} AND TO_CHAR(CAMP_END_DT, 'YYYY-MM-DD') = #{ISS_CN_END_DT} THEN 'Y'
           ELSE 'N' END VALI
      FROM cm_campaign_dtl A
     WHERE CAMPAIGNCODE = #{CAMPAIGNCODE}
  </select>
  
  
  <!-- 일정 저장전 유효성 체크3 (오퍼 템플릿 쿠폰복사여부가 'N'일 경우에는 캠페인 기간이 쿠폰발급기간에 포함 되야한다) -->
  <select id="Schedule.getCampaignValiChk03" parameterType="Map" resultType="String">
    SELECT CASE WHEN CAMP_TERM_CD = '02' THEN  'Y'
                WHEN     CAMP_TERM_CD = '01' 
                     AND TO_CHAR(CAMP_BGN_DT, 'YYYY-MM-DD') BETWEEN #{ISS_CN_BGN_DT} AND #{ISS_CN_END_DT} 
                     AND TO_CHAR(CAMP_END_DT, 'YYYY-MM-DD') BETWEEN #{ISS_CN_BGN_DT} AND #{ISS_CN_END_DT} THEN 'Y'
           ELSE 'N' END VALI
      FROM cm_campaign_dtl A
     WHERE CAMPAIGNCODE = #{CAMPAIGNCODE}
  </select>
  
  
  <!-- 일정 저장전 유효성 체크4 (캠페인 가긴 타입이 FROM~TO일경우 채널 노출일이 캠페인 기간에 포함되는지 체크) -->
  <!-- LMS관련 사항 수정 (2018.5.3) -->
  <select id="Schedule.getCampaignValiChk04" parameterType="Map" resultType="String">
    SELECT CASE WHEN COUNT(0) = 0 THEN 'Y' ELSE 'N' END VALI
    FROM(
      SELECT 
         CASE WHEN A.CAMP_TERM_CD = '02' THEN 'Y'
              WHEN B.CHANNEL_CD   = 'TOAST' THEN 'Y'
              WHEN TO_CHAR(B.SMS_DISP_DT,    'YYYY-MM-DD') BETWEEN TO_CHAR(A.CAMP_BGN_DT, 'YYYY-MM-DD') AND TO_CHAR(A.CAMP_END_DT, 'YYYY-MM-DD') THEN 'Y' 
              WHEN TO_CHAR(B.EMAIL_DISP_DT,  'YYYY-MM-DD') BETWEEN TO_CHAR(A.CAMP_BGN_DT, 'YYYY-MM-DD') AND TO_CHAR(A.CAMP_END_DT, 'YYYY-MM-DD') THEN 'Y' 
              WHEN TO_CHAR(B.MOBILE_DISP_DT, 'YYYY-MM-DD') BETWEEN TO_CHAR(A.CAMP_BGN_DT, 'YYYY-MM-DD') AND TO_CHAR(A.CAMP_END_DT, 'YYYY-MM-DD') THEN 'Y'
              WHEN TO_CHAR(B.LMS_DISP_DT, 'YYYY-MM-DD') BETWEEN TO_CHAR(A.CAMP_BGN_DT, 'YYYY-MM-DD') AND TO_CHAR(A.CAMP_END_DT, 'YYYY-MM-DD') THEN 'Y' 
        ELSE 'N' END VALI
       FROM cm_campaign_dtl A
           ,cm_campaign_channel B
      WHERE A.CAMPAIGNCODE = #{CAMPAIGNCODE}
        AND A.CAMPAIGNCODE = B.CAMPAIGNCODE

      UNION ALL
      SELECT
         CASE   WHEN TO_CHAR(B.LMS_DISP_DT, 'YYYY-MM-DD') BETWEEN TO_CHAR(A.CAMP_BGN_DT, 'YYYY-MM-DD') AND TO_CHAR(A.CAMP_END_DT, 'YYYY-MM-DD') THEN 'N'
         ELSE 'N' END VALI
       FROM cm_campaign_dtl A
           ,cm_campaign_channel B
      WHERE A.CAMPAIGNCODE = #{CAMPAIGNCODE}
        AND A.CAMPAIGNCODE = B.CAMPAIGNCODE
        AND A.MANUAL_TRANS_YN  IN ( 'N')
        AND B.CHANNEL_CD   IN ('LMS')
    )
    WHERE VALI = 'N'    
  </select>
  
  
  <!-- 해당캠페인의 플로차트 갯수를 구한다 (1이 아니면 진행불가임) -->
  <select id="Schedule.getFlowChartCnt" parameterType="Map" resultType="String">
    SELECT 
              CASE WHEN COUNT(0) = 0 THEN 'E' 
                   WHEN COUNT(0) = 1 THEN 'Y'
                   WHEN COUNT(0) > 1 THEN 'N'
              END CHART_CNT 
      FROM CI_CAMPAIGN  A
     WHERE A.CAMPAIGN_SK  = #{CAMPAIGNID}
  </select>
  
  



  <!-- 해당캠페인의 가비지 데이터를 삭제한다(캠페인오퍼) -->
  <delete id="Schedule.deleteGarbageData1" parameterType="Map">
    DELETE FROM CM_CAMPAIGN_OFFER
     WHERE CELLID ||'#'||OFFERID IN (
                                SELECT '#'
                              FROM DUAL
                            )
       AND CAMPAIGNCODE = #{CAMPAIGNCODE}
  </delete>
  
  
  <!-- 해당캠페인의 가비지 데이터를 삭제한다(캠페인채널) -->
  <delete id="Schedule.deleteGarbageData2" parameterType="Map">
    DELETE FROM CM_CAMPAIGN_CHANNEL
     WHERE CELLID NOT IN (
                SELECT CELLID FROM CI_CeLL_PACKAGE  
                WHERE CAMPAIGN_SK = #{CAMPAIGNID}
                )
       AND CAMPAIGNCODE = #{CAMPAIGNCODE}
  </delete>
  
  
  <!-- 더미오퍼값 캠페인 오퍼테이블에 저장 -->
  <update id="Schedule.setCampaignDummyOffer" parameterType="Map">
      MERGE INTO cm_campaign_offer A
      USING ( 

          SELECT DISTINCT 
                 T3.CAMPAIGN_CD                            AS      CAMPAIGNCODE
               , T3.MARKETING_CELL_SK                   AS      CELLID
               , T3.OFFER_SYS_CD
               , T2.OFFER_TYPE_CD 
               , T2.OFFER_ID                                   AS      OFFERID
             FROM ( 
                  SELECT CAMPAIGN_SK 
                       , CAMPAIGN_CD  
                       , CAMPAIGN_NM  
                       , MARKETING_CELL_SK  
                       , MARKETING_CELL_NM 
                       , MARKETING_CELL_CD 
                       , MAX(COMMUNICATION_SK)       AS      COMMUNICATION_SK
                       , MAX(OFFER_SYS_CD)              AS      OFFER_SYS_CD
                       , MAX(OFFER_CONTENT_ID)        AS      OFFER_CONTENT_ID
                       , MAX(OFFER_CONTENT_NM)       AS      OFFER_CONTENT_NM
                    FROM ( 
                         SELECT DISTINCT 
                                T6.CAMPAIGN_SK 
                              , T6.CAMPAIGN_CD 
                              , T6.CAMPAIGN_NM
                              , T6.MARKETING_CELL_SK 
                              , T6.MARKETING_CELL_NM 
                              , T6.MARKETING_CELL_CD 
                              , T6.COMMUNICATION_SK  
                              , CASE WHEN UPPER(T5.CHAR_EXT_COLUMN_NM) = 'OFFER_SYS_CD' THEN T5.CHAR_UDF_VAL
                                     ELSE NULL
                                END AS OFFER_SYS_CD  
                              , CASE WHEN UPPER(T7.NUM_EXT_COLUMN_NM) = 'OFFER_CONTENT_ID' THEN T7.NUM_UDF_VAL
                                     ELSE NULL
                                END AS OFFER_CONTENT_ID  
                              , CASE WHEN UPPER(T5.CHAR_EXT_COLUMN_NM) = 'OFFER_CONTENT_NM' THEN T5.CHAR_UDF_VAL
                                     ELSE NULL
                                END AS OFFER_CONTENT_NM  
                           FROM CI_CELL_PACKAGE T6
                           LEFT JOIN CI_COMMUNICATION_CHAR_UDF T5 
                             ON T6.COMMUNICATION_SK = T5.COMMUNICATION_SK
                           LEFT JOIN CI_COMMUNICATION_NUM_UDF T7 
                             ON T6.COMMUNICATION_SK = T7.COMMUNICATION_SK
                                      WHERE T6.CAMPAIGN_SK = #{CAMPAIGNID}
                            AND T5.COMMUNICATION_SK IN ( SELECT COMMUNICATION_SK
                                                           FROM CI_COMMUNICATION
                                                          WHERE DELETED_FLG = 'N' ) 
                               AND ( T6.CONTROL_GROUP_TYPE_CD IS NULL OR T6.CONTROL_GROUP_TYPE_CD IN ('_CH','_CL') )
                         ) 
                         GROUP BY CAMPAIGN_SK, CAMPAIGN_CD, CAMPAIGN_NM
                                       , MARKETING_CELL_SK, MARKETING_CELL_NM, MARKETING_CELL_CD 
             )  T3 
             LEFT JOIN CM_CAMPAIGN_CONTENTS_OFFERLIST T2 
               ON T3.OFFER_CONTENT_ID = T2.OFFER_CONTENT_ID
             LEFT JOIN CM_CAMPAIGN_OFFER T1 
               ON T3.MARKETING_CELL_SK = T1.CELLID
             AND T2.OFFER_ID = T1.OFFERID 
             AND T3.OFFER_CONTENT_ID = T1.OFFER_CONTENT_ID 
             LEFT JOIN CM_CAMPAIGN_DTL T4 
               ON T3.CAMPAIGN_SK  = T4.CAMPAIGNID

        ) B
      ON (     A.CELLID  = B.CELLID
           AND A.OFFERID = B.OFFERID  )
      WHEN MATCHED THEN
      UPDATE SET A.OFFER_TYPE_CD        = B.OFFER_TYPE_CD
                ,A.OFFER_SYS_CD         = B.OFFER_SYS_CD
                ,A.CAMPAIGNCODE         = B.CAMPAIGNCODE
                ,A.FLOWCHARTID          = TO_NUMBER(SUBSTR(TRIM(B.CAMPAIGNCODE),5))
                ,A.UPDATE_ID            = TRIM(#{UPDATE_ID})
                ,A.UPDATE_DT            = SYSDATE
      WHEN NOT MATCHED THEN
      INSERT (
                A.CELLID
               ,A.OFFERID
               ,A.OFFER_TYPE_CD
               ,A.OFFER_SYS_CD
               ,A.CAMPAIGNCODE
               ,A.FLOWCHARTID
               ,A.CREATE_ID
               ,A.CREATE_DT
      )
      VALUES (
               B.CELLID
              ,B.OFFERID
              ,B.OFFER_TYPE_CD
              ,B.OFFER_SYS_CD
              ,B.CAMPAIGNCODE
              ,TO_NUMBER(SUBSTR(TRIM(B.CAMPAIGNCODE),5))
              ,TRIM(#{CREATE_ID})
              ,SYSDATE
      )


  </update>


  <!-- 해당캠페인의 세그먼트 갯수와 오퍼갯수가 동일한지 여부 체크 -->
  <select id="Schedule.getCampaignOfferCnt" parameterType="Map" resultType="String">
    SELECT CASE WHEN OFFER_CNT = CELL_OFFER_CNT THEN 'Y' ELSE 'N' END CNT
      FROM
      ( 
        SELECT COUNT(0) OFFER_CNT
          FROM CM_CAMPAIGN_OFFER
         WHERE CELLID IN
      ( SELECT MARKETING_CELL_SK
         FROM CI_CELL_PACKAGE
         WHERE CAMPAIGN_SK = #{CAMPAIGNID} )
         ORDER BY CREATE_DT DESC
      ) T1 ,
      ( 
        SELECT COUNT(T2.OFFER_ID) AS CELL_OFFER_CNT
             FROM ( 
                  SELECT CAMPAIGN_SK 
                       , CAMPAIGN_CD  
                       , CAMPAIGN_NM  
                       , MARKETING_CELL_SK  
                       , MARKETING_CELL_NM 
                       , MARKETING_CELL_CD 
                       , MAX(COMMUNICATION_SK)       AS      COMMUNICATION_SK
                       , MAX(OFFER_SYS_CD)              AS      OFFER_SYS_CD
                       , MAX(OFFER_CONTENT_ID)        AS      OFFER_CONTENT_ID
                       , MAX(OFFER_CONTENT_NM)       AS      OFFER_CONTENT_NM
                    FROM ( 
                         SELECT DISTINCT 
                                T6.CAMPAIGN_SK 
                              , T6.CAMPAIGN_CD 
                              , T6.CAMPAIGN_NM
                              , T6.MARKETING_CELL_SK 
                              , T6.MARKETING_CELL_NM 
                              , T6.MARKETING_CELL_CD 
                              , T6.COMMUNICATION_SK  
                              , CASE WHEN UPPER(T5.CHAR_EXT_COLUMN_NM) = 'OFFER_SYS_CD' THEN T5.CHAR_UDF_VAL
                                     ELSE NULL
                                END AS OFFER_SYS_CD  
                              , CASE WHEN UPPER(T7.NUM_EXT_COLUMN_NM) = 'OFFER_CONTENT_ID' THEN T7.NUM_UDF_VAL
                                     ELSE NULL
                                END AS OFFER_CONTENT_ID  
                              , CASE WHEN UPPER(T5.CHAR_EXT_COLUMN_NM) = 'OFFER_CONTENT_NM' THEN T5.CHAR_UDF_VAL
                                     ELSE NULL
                                END AS OFFER_CONTENT_NM  
                           FROM CI_CELL_PACKAGE T6
                           LEFT JOIN CI_COMMUNICATION_CHAR_UDF T5 
                             ON T6.COMMUNICATION_SK = T5.COMMUNICATION_SK
                           LEFT JOIN CI_COMMUNICATION_NUM_UDF T7 
                             ON T6.COMMUNICATION_SK = T7.COMMUNICATION_SK
                                      WHERE T6.CAMPAIGN_SK = #{CAMPAIGNID}
                            AND T5.COMMUNICATION_SK IN ( SELECT COMMUNICATION_SK
                                                           FROM CI_COMMUNICATION
                                                          WHERE DELETED_FLG = 'N' ) 
                            AND ( T6.CONTROL_GROUP_TYPE_CD IS NULL OR T6.CONTROL_GROUP_TYPE_CD IN ('_CH','_CL') )
                         ) 
                         GROUP BY CAMPAIGN_SK, CAMPAIGN_CD, CAMPAIGN_NM
                                       , MARKETING_CELL_SK, MARKETING_CELL_NM, MARKETING_CELL_CD 
             )  T3 
             LEFT JOIN CM_CAMPAIGN_CONTENTS_OFFERLIST T2 
               ON T3.OFFER_CONTENT_ID = T2.OFFER_CONTENT_ID
             LEFT JOIN CM_CAMPAIGN_OFFER T1 
               ON T3.MARKETING_CELL_SK = T1.CELLID
             AND T2.OFFER_ID = T1.OFFERID 
             AND T3.OFFER_CONTENT_ID = T1.OFFER_CONTENT_ID 
             LEFT JOIN CM_CAMPAIGN_DTL T4 
               ON T3.CAMPAIGN_SK  = T4.CAMPAIGNID


      ) T2
  
  </select> 


  <!-- 해당캠페인의 플로차트가 수정중인지 여부 체크 -->
  <select id="Schedule.getFlowchartOpenChk" parameterType="Map" resultType="String">
    SELECT CASE WHEN COUNT(0) = 0 THEN 'N' ELSE 'Y' END CHK
      FROM CI_CELL_PACKAGE
     WHERE CAMPAIGN_SK = #{CAMPAIGNID}
  </select> 

  <!-- 캠페인 실행 예약 등록 -->
  <update id="Schedule.setCampaignRunResv" parameterType="Map" >
      MERGE INTO cm_campaign_run_resv
      USING DUAL
      ON ( CAMPAIGNCODE = #{CAMPAIGNCODE} )
      WHEN MATCHED THEN
      UPDATE SET RSRV_START_DT        = TO_CHAR(TO_DATE(TRIM(#{RSRV_START_DT}), 'YYYY-MM-DD'), 'YYYYMMDD')
                ,RSRV_END_DT          = TO_CHAR(TO_DATE(TRIM(#{RSRV_END_DT}),   'YYYY-MM-DD'), 'YYYYMMDD')
                ,RSRV_GUBUN_CODE      = TRIM(#{RSRV_GUBUN_CODE})
                ,RSRV_YEAR            = TRIM(#{RSRV_YEAR})
                ,RSRV_MONTH           = TRIM(#{RSRV_MONTH})
                ,RSRV_DAY             = LPAD(TRIM(#{RSRV_DAY}), 2, '0')
                ,RSRV_HOUR            = LPAD(TRIM(#{RSRV_HOUR}), 2, '0')
                ,RSRV_MINUTE          = LPAD(TRIM(#{RSRV_MINUTE}), 2, '0')
                ,RSRV_WEEK_DAY        = TRIM(#{RSRV_WEEK_DAY})
                ,RSRV_TIMEHOURFROM    = LPAD(TRIM(#{RSRV_TIMEHOURFROM}), 2, '0')
                ,RSRV_TIMEHOURTO      = LPAD(TRIM(#{RSRV_TIMEHOURTO}), 2, '0')
                ,RSRV_TIMEMIN         = LPAD(TRIM(#{RSRV_TIMEMIN}), 2, '0')
                ,RSRV_EVERYTIME       = TRIM(#{RSRV_EVERYTIME})
                ,UPDATE_ID            = TRIM(#{UPDATE_ID})
                ,UPDATE_DT            = SYSDATE
      WHEN NOT MATCHED THEN
      INSERT (
               CAMPAIGNCODE
              ,FLOWCHARTID
              ,RSRV_START_DT
              ,RSRV_END_DT
              ,RSRV_GUBUN_CODE
              ,RSRV_YEAR
              ,RSRV_MONTH
              ,RSRV_DAY
              ,RSRV_HOUR
              ,RSRV_MINUTE
              ,RSRV_WEEK_DAY
              ,RSRV_TIMEHOURFROM
              ,RSRV_TIMEHOURTO
              ,RSRV_TIMEMIN
              ,RSRV_EVERYTIME
              ,CREATE_ID
              ,CREATE_DT
      )
      VALUES (
               TRIM(#{CAMPAIGNCODE})
              ,TO_NUMBER(SUBSTR(TRIM(#{CAMPAIGNCODE}),5))
              ,TO_CHAR(TO_DATE(TRIM(#{RSRV_START_DT}), 'YYYY-MM-DD'), 'YYYYMMDD')
              ,TO_CHAR(TO_DATE(TRIM(#{RSRV_END_DT}),   'YYYY-MM-DD'), 'YYYYMMDD')
              ,TRIM(#{RSRV_GUBUN_CODE})
              ,TRIM(#{RSRV_YEAR})
              ,TRIM(#{RSRV_MONTH})
              ,LPAD(TRIM(#{RSRV_DAY}), 2, '0')
              ,LPAD(TRIM(#{RSRV_HOUR}), 2, '0')
              ,LPAD(TRIM(#{RSRV_MINUTE}), 2, '0')
              ,TRIM(#{RSRV_WEEK_DAY})
              ,LPAD(TRIM(#{RSRV_TIMEHOURFROM}), 2, '0')
              ,LPAD(TRIM(#{RSRV_TIMEHOURTO}), 2, '0')
              ,LPAD(TRIM(#{RSRV_TIMEMIN}), 2, '0')
              ,TRIM(#{RSRV_EVERYTIME})
              ,TRIM(#{CREATE_ID})
              ,SYSDATE
      )
  </update>




  <!-- 캠페인 실행 일정 등록 01 : 매일 -->
  <update id="Schedule.setCampaignRunSchedule01" parameterType="Map" >
  <![CDATA[ 
      MERGE INTO cm_campaign_run_schedule A
      USING (
            SELECT
               TRIM(#{CAMPAIGNCODE}) CAMPAIGNCODE
              ,TO_DATE(A.DAY || LPAD(#{RSRV_HOUR}, 2, '0') || LPAD(#{RSRV_MINUTE}, 2, '0'), 'YYYY-MM-DDHH24MI') RSRV_DT
              ,TRIM(#{CREATE_ID}) CREATE_ID
              ,SYSDATE
            FROM(
              SELECT TO_CHAR(DAY + LEVEL - 1, 'YYYY-MM-DD') DAY
                FROM (SELECT TO_DATE(#{RSRV_START_DT}, 'YYYY-MM-DD') DAY FROM DUAL)
               CONNECT BY LEVEL <= TO_DATE(#{RSRV_END_DT}, 'YYYY-MM-DD') - TO_DATE(#{RSRV_START_DT}, 'YYYY-MM-DD') +1
               )A
       )B
      ON (     A.CAMPAIGNCODE = B.CAMPAIGNCODE
           AND TO_CHAR(A.RSRV_DT, 'YYYYMMDDHH24MISS') = TO_CHAR(B.RSRV_DT, 'YYYYMMDDHH24MISS')
        )
      WHEN NOT MATCHED THEN
      INSERT (
               CAMPAIGNCODE
              ,FLOWCHARTID
              ,RSRV_DT
              ,CREATE_ID
              ,CREATE_DT
      )
      VALUES (
               B.CAMPAIGNCODE
              ,TO_NUMBER(SUBSTR(TRIM(B.CAMPAIGNCODE),5))
              ,B.RSRV_DT
              ,TRIM(#{CREATE_ID})
              ,SYSDATE
      )
  ]]>
  </update>


  <!-- 캠페인 실행 일정 등록 02 : 매주 -->
  <update id="Schedule.setCampaignRunSchedule02" parameterType="Map" >
  <![CDATA[ 
      MERGE INTO cm_campaign_run_schedule A
      USING (
        SELECT
             TRIM(#{CAMPAIGNCODE}) CAMPAIGNCODE
            ,TO_DATE(A.DAY || LPAD(#{RSRV_HOUR}, 2, '0') || LPAD(#{RSRV_MINUTE}, 2, '0'), 'YYYY-MM-DDHH24MI') RSRV_DT
            ,TRIM(#{CREATE_ID}) CREATE_ID
            ,SYSDATE
        FROM(
            SELECT DAY
              FROM (
                  SELECT TO_CHAR(DAY + LEVEL - 1, 'YYYY-MM-DD') DAY, TO_CHAR(DAY + LEVEL - 1, 'D') WEEK
                    FROM (SELECT TO_DATE(#{RSRV_START_DT}, 'YYYY-MM-DD') DAY FROM DUAL)
                   CONNECT BY LEVEL <= TO_DATE(#{RSRV_END_DT}, 'YYYY-MM-DD') - TO_DATE(#{RSRV_START_DT}, 'YYYY-MM-DD') +1
                 )
               WHERE #{RSRV_WEEK_DAY} LIKE '%'||WEEK||'%'
           )A
       )B
      ON (     A.CAMPAIGNCODE = B.CAMPAIGNCODE
           AND TO_CHAR(A.RSRV_DT, 'YYYYMMDDHH24MISS') = TO_CHAR(B.RSRV_DT, 'YYYYMMDDHH24MISS')
        )
      WHEN NOT MATCHED THEN
      INSERT (
               CAMPAIGNCODE
              ,FLOWCHARTID
              ,RSRV_DT
              ,CREATE_ID
              ,CREATE_DT
      )
      VALUES (
               B.CAMPAIGNCODE
              ,TO_NUMBER(SUBSTR(TRIM(B.CAMPAIGNCODE),5))
              ,B.RSRV_DT
              ,TRIM(#{CREATE_ID})
              ,SYSDATE
      )
  ]]>
  </update>


  <!-- 캠페인 실행 일정 등록 03 : 매월 -->
  <update id="Schedule.setCampaignRunSchedule03" parameterType="Map" >
  <![CDATA[ 
      MERGE INTO cm_campaign_run_schedule A
      USING (
            SELECT
                 TRIM(#{CAMPAIGNCODE}) CAMPAIGNCODE
                ,TO_DATE(A.DAY || LPAD(#{RSRV_HOUR}, 2, '0') || LPAD(#{RSRV_MINUTE}, 2, '0'), 'YYYY-MM-DDHH24MI') RSRV_DT
                ,TRIM(#{CREATE_ID}) CREATE_ID
                ,SYSDATE
            FROM(
                SELECT DAY
                  FROM (
                      SELECT TO_CHAR(DAY + LEVEL - 1, 'YYYY-MM-DD') DAY
                        FROM (SELECT TO_DATE(#{RSRV_START_DT}, 'YYYY-MM-DD') DAY FROM DUAL)
                       CONNECT BY LEVEL <= TO_DATE(#{RSRV_END_DT}, 'YYYY-MM-DD') - TO_DATE(#{RSRV_START_DT}, 'YYYY-MM-DD') +1
                     )
                   WHERE TO_CHAR(TO_DATE(DAY, 'YYYY-MM-DD'), 'DD') = LPAD(#{RSRV_DAY},2,'0') 
               )A
       )B
      ON (     A.CAMPAIGNCODE = B.CAMPAIGNCODE
           AND TO_CHAR(A.RSRV_DT, 'YYYYMMDDHH24MISS') = TO_CHAR(B.RSRV_DT, 'YYYYMMDDHH24MISS')
        )
      WHEN NOT MATCHED THEN
      INSERT (
               CAMPAIGNCODE
              ,FLOWCHARTID
              ,RSRV_DT
              ,CREATE_ID
              ,CREATE_DT
      )
      VALUES (
               B.CAMPAIGNCODE
              ,TO_NUMBER(SUBSTR(TRIM(B.CAMPAIGNCODE),5))
              ,B.RSRV_DT
              ,TRIM(#{CREATE_ID})
              ,SYSDATE
      )
  ]]>
  </update>


  <!-- 캠페인 실행 일정 등록 04 : 매월 말일 -->
  <update id="Schedule.setCampaignRunSchedule04" parameterType="Map" >
  <![CDATA[ 
      MERGE INTO cm_campaign_run_schedule A
      USING (
            SELECT
                 TRIM(#{CAMPAIGNCODE}) CAMPAIGNCODE
                ,TO_DATE(A.DAY || LPAD(#{RSRV_HOUR}, 2, '0') || LPAD(#{RSRV_MINUTE}, 2, '0'), 'YYYY-MM-DDHH24MI') RSRV_DT
                ,TRIM(#{CREATE_ID})    CREATE_ID
                ,SYSDATE
            FROM(
                SELECT DAY
                  FROM (
                      SELECT TO_CHAR(DAY + LEVEL - 1, 'YYYY-MM-DD') DAY
                        FROM (SELECT TO_DATE(#{RSRV_START_DT}, 'YYYY-MM-DD') DAY FROM DUAL)
                       CONNECT BY LEVEL <= TO_DATE(#{RSRV_END_DT}, 'YYYY-MM-DD') - TO_DATE(#{RSRV_START_DT}, 'YYYY-MM-DD') +1
                     )
                   WHERE TO_CHAR(LAST_DAY(TO_DATE(DAY, 'YYYY-MM-DD')),'YYYY-MM-DD') = DAY
               )A
       )B
      ON (     A.CAMPAIGNCODE = B.CAMPAIGNCODE
           AND TO_CHAR(A.RSRV_DT, 'YYYYMMDDHH24MISS') = TO_CHAR(B.RSRV_DT, 'YYYYMMDDHH24MISS')
        )
      WHEN NOT MATCHED THEN
      INSERT (
               CAMPAIGNCODE
              ,FLOWCHARTID
              ,RSRV_DT
              ,CREATE_ID
              ,CREATE_DT
      )
      VALUES (
               B.CAMPAIGNCODE
              ,TO_NUMBER(SUBSTR(TRIM(B.CAMPAIGNCODE),5))
              ,B.RSRV_DT
              ,TRIM(#{CREATE_ID})
              ,SYSDATE
      )
  ]]>
  </update>


  <!-- 캠페인 실행 일정 등록 05 : 사용자 지정 -->
  <update id="Schedule.setCampaignRunSchedule05" parameterType="Map" >
    MERGE INTO cm_campaign_run_schedule A
    USING (
        <foreach collection="array" item="RUN_RESV_LIST" separator=" UNION ALL " index="index" > 
      SELECT 
             TRIM(#{CAMPAIGNCODE}) CAMPAIGNCODE
            ,TO_DATE('${array[index]}', 'YYYY-MM-DD HH24:MI') RSRV_DT
                ,TRIM(#{CREATE_ID}) CREATE_ID
                ,SYSDATE    
      FROM DUAL
      </foreach>
    ) B
    ON (     A.CAMPAIGNCODE = B.CAMPAIGNCODE
           AND TO_CHAR(A.RSRV_DT, 'YYYYMMDDHH24MISS') = TO_CHAR(B.RSRV_DT, 'YYYYMMDDHH24MISS')
      )
      WHEN NOT MATCHED THEN
      INSERT (
               CAMPAIGNCODE
              ,FLOWCHARTID
              ,RSRV_DT
              ,CREATE_ID
              ,CREATE_DT
      )
      VALUES (
               B.CAMPAIGNCODE
              ,TO_NUMBER(SUBSTR(TRIM(B.CAMPAIGNCODE),5))
              ,B.RSRV_DT
              ,TRIM(#{CREATE_ID})
              ,SYSDATE
      )       
  </update>

  <!-- 캠페인 실행 일정 등록 06 : 지정시간 -->
  <update id="Schedule.setCampaignRunSchedule06" parameterType="Map" >
    MERGE INTO cm_campaign_run_schedule A
    USING (
        <foreach collection="array" item="RUN_RESV_LIST" separator=" UNION ALL " index="index" > 
      SELECT 
             TRIM(#{CAMPAIGNCODE}) CAMPAIGNCODE
            ,TO_DATE('${array[index]}', 'YYYY-MM-DD HH24:MI') RSRV_DT
                ,TRIM(#{CREATE_ID}) CREATE_ID
                ,SYSDATE    
      FROM DUAL
      </foreach>
    ) B
    ON (     A.CAMPAIGNCODE = B.CAMPAIGNCODE
           AND TO_CHAR(A.RSRV_DT, 'YYYYMMDDHH24MISS') = TO_CHAR(B.RSRV_DT, 'YYYYMMDDHH24MISS')
      )
      WHEN NOT MATCHED THEN
      INSERT (
               CAMPAIGNCODE
              ,FLOWCHARTID
              ,RSRV_DT
              ,CREATE_ID
              ,CREATE_DT
      )
      VALUES (
               B.CAMPAIGNCODE
              ,TO_NUMBER(SUBSTR(TRIM(B.CAMPAIGNCODE),5))
              ,B.RSRV_DT
              ,TRIM(#{CREATE_ID})
              ,SYSDATE
      )       
  </update>

  <!-- 기존스케쥴 삭제 -->
  <delete id="Schedule.deleteCampaignRunSchedule" parameterType="Map" >
    DELETE FROM cm_campaign_run_schedule
     WHERE CAMPAIGNCODE = TRIM(#{CAMPAIGNCODE})
       AND RUN_START_DT IS NULL
  </delete>
  

  <!-- 기존스케쥴 시작 -->
  <update id="Schedule.setCampaignStart" parameterType="Map" >
    UPDATE cm_campaign_dtl
       SET CAMP_STATUS_CD = 'START'
            ,UPDATE_ID      = TRIM(#{UPDATE_ID})
            ,UPDATE_DT      = SYSDATE
     WHERE CAMPAIGNCODE   = TRIM(#{CAMPAIGNCODE})
  </update>
  

  <!-- 기존스케쥴 취소 -->
  <update id="Schedule.setCampaignCancel" parameterType="Map" >
    UPDATE cm_campaign_dtl
       SET CAMP_STATUS_CD = 'EDIT'
            ,UPDATE_ID      = TRIM(#{UPDATE_ID})
            ,UPDATE_DT      = SYSDATE
     WHERE CAMPAIGNCODE   = TRIM(#{CAMPAIGNCODE})
  </update>

  <!-- 플로차트 이름가져오기 -->

  <select id="Schedule.getFlowchartName" parameterType="Map" resultType="String">
  <![CDATA[ 
    SELECT t5.PATH||DECODE(lvl, 1, '', '/')   FILENAME 
      FROM UA_CAMPAIGN  T4
          ,(
            SELECT FOLDERID, SUBSTR(SYS_CONNECT_BY_PATH(NAME, '/'), 15) AS PATH, level lvl 
              FROM UA_FOLDER START WITH FOLDERID = 2 CONNECT BY PRIOR FOLDERID = PARENTFOLDERID 
           ) T5 
     WHERE T3.CAMPAIGNID   = T4.CAMPAIGNID 
       AND T4.FOLDERID     = T5.FOLDERID
       AND T3.CAMPAIGNID   = TRIM(#{CAMPAIGNID})
       AND T3.TEMPFLAG     = 0
  ]]>
  </select>


  <!-- 일정목록 조회 -->
  <select id="Schedule.getScheduleList" parameterType="Map" resultMap="CampaignRunScheduleBO">
    SELECT a.* FROM (
      SELECT a.*
            ,ROWNUM num
      FROM( 
        SELECT 
           A.CAMPAIGNCODE               campaigncode
          ,TO_CHAR(A.RSRV_DT       , 'YYYY-MM-DD HH24:MI') rsrv_dt
          ,TO_CHAR(A.RUN_START_DT  , 'YYYY-MM-DD HH24:MI') run_start_dt
          ,TO_CHAR(A.RUN_END_DT    , 'YYYY-MM-DD HH24:MI') run_end_dt
          ,A.RUNID                      runid
          ,NVL(A.RUN_STATUS, '실행전')  run_status
          ,A.RUN_SUCCESS_YN             run_success_yn
          ,A.CREATE_ID                  create_id
          ,(SELECT USER_NAME FROM CM_USER WHERE ID = A.CREATE_ID) create_nm
          ,TO_CHAR(A.CREATE_DT, 'YYYY-MM-DD HH24:MI:SS')                  create_dt
          ,A.UPDATE_ID                  update_id
          ,(SELECT USER_NAME FROM CM_USER WHERE ID = A.UPDATE_ID) update_nm
          ,TO_CHAR(A.UPDATE_DT, 'YYYY-MM-DD HH24:MI:SS')                  update_dt
          ,ROWNUM              row_num        
        FROM cm_campaign_run_schedule A
         WHERE CAMPAIGNCODE = (SELECT CAMPAIGN_CD FROM CI_CAMPAIGN WHERE CAMPAIGN_SK = TRIM(#{CAMPAIGNID}))
         <if test='SEARCH_TYPE == "NULL"'>
            AND A.RUN_START_DT IS NULL
         </if>
         <if test='SEARCH_TYPE == "NOTNULL"'>
            AND A.RUN_START_DT IS NOT NULL
         </if>
         ORDER BY RSRV_DT ASC 
      )a
    )a
    <![CDATA[ 
      WHERE num >=  #{searchRangeStart} 
        AND num <=  #{searchRangeEnd}
      ORDER BY num
      ]]>    
  </select>


  <!-- 일정목록 조회 -->
  <select id="Schedule.getScheduleListCnt" parameterType="Map" resultType="String">
    SELECT COUNT(0) CNT
    FROM cm_campaign_run_schedule A
     WHERE CAMPAIGNCODE = (SELECT CAMPAIGNCODE FROM CI_CAMPAIGN WHERE CAMPAIGN_SK = TRIM(#{CAMPAIGNID}))
     <if test='SEARCH_TYPE == "NULL"'>
        AND A.RUN_START_DT IS NULL
     </if>
     <if test='SEARCH_TYPE == "NOTNULL"'>
        AND A.RUN_START_DT IS NOT NULL
     </if>
     ORDER BY RSRV_DT ASC 
     
  </select>


  <!-- 실행된 일정이 전체 실패인지 체크 -->
  <select id="Schedule.getRunSucessYnChk" parameterType="Map" resultType="String">
    SELECT CASE WHEN COUNT(0) > 0 THEN 'N' ELSE 'Y' END ALL_FAIL
        FROM cm_campaign_run_schedule A
     WHERE CAMPAIGNCODE = TRIM(#{CAMPAIGNCODE})
       AND NVL(RUN_SUCCESS_YN, 'Y') = 'Y' 
  </select>
  

  <!-- 일정목록 선택 삭제 -->
  <delete id="Schedule.deleteScheduleList" parameterType="Map" >
    DELETE FROM cm_campaign_run_schedule
     WHERE CAMPAIGNCODE = TRIM(#{CAMPAIGNCODE})
       AND TO_CHAR(RSRV_DT,'YYYY-MM-DD HH24:MI') 
       IN (
       <foreach collection="array"  separator="," index="index" >
        '${array[index]}'
       </foreach>
       )
  </delete>
  

  <!-- 일정목록 건별 등록 -->
  <update id="Schedule.setScheduleList" parameterType="Map" >
        MERGE INTO cm_campaign_run_schedule
      USING DUAL
      ON (     CAMPAIGNCODE   = #{CAMPAIGNCODE}
           AND RSRV_DT        = TO_DATE(TRIM(#{RSRV_DT}) || LPAD(TRIM(#{RSRV_HOUR}), 2, '0') || LPAD(TRIM(#{RSRV_MINUTE}), 2, '0') , 'YYYY-MM-DDHH24MI') )
      WHEN MATCHED THEN
      UPDATE SET UPDATE_ID    = TRIM(#{UPDATE_ID})
                ,UPDATE_DT    = SYSDATE
      WHEN NOT MATCHED THEN
      INSERT (
               CAMPAIGNCODE
              ,FLOWCHARTID
              ,RSRV_DT
              ,CREATE_ID
              ,CREATE_DT
      )
      VALUES (
               TRIM(#{CAMPAIGNCODE})
              ,TO_NUMBER(SUBSTR(TRIM(#{CAMPAIGNCODE}),5))
              ,TO_DATE(TRIM(#{RSRV_DT}) || LPAD(TRIM(#{RSRV_HOUR}), 2, '0') || LPAD(TRIM(#{RSRV_MINUTE}), 2, '0') , 'YYYY-MM-DDHH24MI')
              ,TRIM(#{CREATE_ID})
              ,SYSDATE
      )
  </update>


  <!-- 캠페인 테스트 실행 채널 입력 -->
  <update id="Schedule.setCampaignTestChannel" parameterType="Map" >
    INSERT ALL 
    <foreach collection="array"  item="CELL_CHANNEL" separator=" " index="index" > 
     INTO cm_campaign_test_channel
     (
       CAMPAIGNCODE
      ,RUN_DT
      ,CELLID
      ,CHANNEL_CD
      ,TREATMENTCODE
      ,TRANS_STATUS_CD
      ,TRANS_BGN_DT
      ,TRANS_END_DT
      ,TRANS_CNT
      ,CREATE_ID
      ,CREATE_DT
    ) 
    VALUES (
       TRIM(#{CAMPAIGNCODE})
      ,TO_DATE(TRIM(#{RUN_DT}), 'YYYY-MM-DD HH24:MI:SS')
      ,(SELECT CELLID     FROM cm_campaign_channel WHERE CHANNEL_CD || '#@#' || CELLID = '${array[index]}')
      ,(SELECT CHANNEL_CD FROM cm_campaign_channel WHERE CHANNEL_CD || '#@#' || CELLID = '${array[index]}')
      ,TRIM(#{CAMPAIGNCODE}) || '_' || TO_CHAR(TO_DATE(TRIM(#{RUN_DT}), 'YYYY-MM-DD HH24:MI:SS'), 'YYYYMMDDHH24MISS') || '_' || (SELECT CELLID     FROM cm_campaign_channel WHERE CHANNEL_CD || '#@#' || CELLID = '${array[index]}')  
      ,'TWAIT'
      ,NULL
      ,NULL
      ,NULL
      ,TRIM(#{CREATE_ID})
      ,SYSDATE
    ) 
    </foreach>
    SELECT * FROM DUAL
  </update>


  <!-- 캠페인 테스트 실행 대상 입력 -->
  <update id="Schedule.setCampaignTestTarget" parameterType="Map" >
    INSERT ALL 
    <foreach collection="array"  item="TEST_MEM_ID" separator=" " index="index" > 
     INTO cm_campaign_test_target
     (
       CAMPAIGNCODE
      ,RUN_DT
      ,MEM_ID
      ,CREATE_ID
      ,CREATE_DT
    ) 
    VALUES (
       TRIM(#{CAMPAIGNCODE})
      ,TO_DATE(TRIM(#{RUN_DT}), 'YYYY-MM-DD HH24:MI:SS')
      ,'${array[index]}'
      ,TRIM(#{CREATE_ID})
      ,SYSDATE
    ) 
    </foreach>
    SELECT * FROM DUAL
  </update>


  <!-- 캠페인 테스트 실행 입력 -->
  <update id="Schedule.setCampaignTest" parameterType="Map" >
    INSERT INTO cm_campaign_test
    (
       CAMPAIGNCODE
      ,RUN_DT
      ,CREATE_ID
      ,CREATE_DT
    ) 
    VALUES (
       TRIM(#{CAMPAIGNCODE})
      ,TO_DATE(TRIM(#{RUN_DT}), 'YYYY-MM-DD HH24:MI:SS')
      ,TRIM(#{CREATE_ID})
      ,SYSDATE
    ) 
  </update>

  <!-- DEVICEID 가 대상수준일 때 오퍼를 사용하거나 모바일 알리미 이외 채널 사용 불가 -->
  <select id="Schedule.getCampaignValiChk10" parameterType="Map" resultType="String">
    SELECT CASE WHEN COUNT(0) = 0 THEN 'Y' ELSE 'N' END
      FROM (
        SELECT 
            CASE WHEN M.AUDIENCE_CD = 'DEVICE_ID' AND (NVL(C.OFFER_TYPE_CD,'ZZ') != 'ZZ' OR NVL(D.CHANNEL_CD,'MOBILE') != 'MOBILE') THEN 'N' ELSE 'Y' END VALI
          FROM cm_campaign_dtl M
            , CI_CAMPAIGN A
            , cm_campaign_offer C
            , cm_campaign_channel D
         WHERE A.CAMPAIGN_CD = #{CAMPAIGNCODE}
           AND M.CAMPAIGNID = A.CAMPAIGN_SK
           AND A.CAMPAIGN_CD = C.CAMPAIGNCODE
           AND C.CELLID = D.CELLID(+)
     )
     WHERE VALI = 'N'
  </select>
  
  <!-- 캠페인 전송방식이 Batch 일경우 채널정보에 발송시간 데이터가 없을 경우 에러 처리 --> 
  <select id="Schedule.getCampaignValiChk11" parameterType="Map" resultType="String">
      SELECT CASE WHEN SMS_DISP_TIME IS NULL AND EMAIL_DISP_TIME IS NULL AND MOBILE_DISP_TIME IS NULL THEN 'Y' 
                  ELSE 
                  ( CASE WHEN SMS_DISP_TIME    = 'N' THEN 'SMS'    END || CASE WHEN SMS_DISP_TIME = 'N' AND ( EMAIL_DISP_TIME  = 'N' OR MOBILE_DISP_TIME = 'N' ) THEN ',' END ||
                    CASE WHEN EMAIL_DISP_TIME  = 'N' THEN 'EMAIL'  END || CASE WHEN EMAIL_DISP_TIME  = 'N' AND MOBILE_DISP_TIME = 'N' THEN ',' END ||
                    CASE WHEN MOBILE_DISP_TIME = 'N' THEN 'MOBILE' END ) END MSG
                                    
            FROM (            
                
                SELECT A.CAMPAIGNCODE
                      ,A.MANUAL_TRANS_YN MANUAL_TRANS_YN  
                      ,MAX(CASE WHEN A.MANUAL_TRANS_YN = 'N' AND B.CHANNEL_CD = 'SMS' AND SMS_DISP_TIME IS NULL THEN 'N' ELSE '' END) SMS_DISP_TIME                      
                      ,MAX(CASE WHEN A.MANUAL_TRANS_YN = 'N' AND B.CHANNEL_CD = 'EMAIL' AND EMAIL_DISP_TIME  IS NULL THEN 'N' ELSE '' END) EMAIL_DISP_TIME                      
                      ,MAX(CASE WHEN A.MANUAL_TRANS_YN = 'N' AND B.CHANNEL_CD = 'MOBILE' AND MOBILE_DISP_TIME IS NULL THEN 'N' ELSE '' END) MOBILE_DISP_TIME                                     
                      
                FROM  cm_campaign_dtl A,
                      cm_campaign_channel B
                
                WHERE A.CAMPAIGNCODE = B.CAMPAIGNCODE(+)
                AND   A.CAMPAIGNCODE = #{CAMPAIGNCODE}
                
                GROUP BY A.CAMPAIGNCODE, A.MANUAL_TRANS_YN
            
            ) 
            
  </select>

  <update id="Schedule.campaignStop" parameterType="Map">
    UPDATE CM_CAMPAIGN_RUN_SCHEDULE
      SET RUN_SUCCESS_YN = 'N'
        , RUN_END_DT = SYSDATE
        , RUN_STATUS = '실행중지(사용자에 의한 배치실행중지)'
      WHERE 1=1
        AND CAMPAIGNCODE = #{CAMPAIGNCODE}
        AND RUN_START_DT IS NOT NULL
        AND RUN_END_DT IS NULL
        AND RUNID IS NOT NULL
        AND RUN_STATUS IS NOT NULL
        AND RUN_SUCCESS_YN IS NULL
        AND RSRV_DT IS NOT NULL
  </update>  
</mapper>
